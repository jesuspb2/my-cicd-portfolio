name: CICD - Deploy to DEV

on:
  push:
    branches: [main, dev-backend]

permissions:
  id-token: write
  contents: read

env:
  ENV:                    ${{ vars.ENV }}
  APP_NAME:               ${{ vars.APP_NAME }}
  AWS_REGION:             ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID:         ${{ vars.AWS_ACCOUNT_ID }}
  BACKEND_BUCKET:         ${{ vars.BACKEND_BUCKET }}
  BACKEND_DYNAMODB_TABLE: ${{ vars.BACKEND_DYNAMODB_TABLE }}
  BUCKET_FRONT:           ${{ vars.BUCKET_FRONT }}
  DOMAIN_NAME:            ${{ vars.DOMAIN_NAME }}
  DOMAIN_API_NAME:        ${{ vars.DOMAIN_API_NAME }}
  FROM_EMAIL:             ${{ vars.FROM_EMAIL }}
  TO_EMAIL:               ${{ vars.TO_EMAIL }}
  DYNAMODB_TABLE_NAME:    ${{ vars.DYNAMODB_TABLE_NAME }}

jobs:
  # --------------------------- UNIT TESTS ---------------------------
  unit-tests:
    runs-on: ubuntu-latest
    environment: DEV

    steps:
      - uses: actions/checkout@v4
      - run: |
          echo "[INFO] Installing Python dependencies..."
          pip install -r backend/tests/requirements.txt
          echo "[INFO] Running unit tests..."
          pytest backend/tests/test_handler.py -s -v

  # --------------------------- BUILD BACKEND ---------------------------
  build-backend:
    runs-on: ubuntu-latest
    needs: unit-tests
    environment: DEV

    outputs:
      IMAGE_TAG: ${{ steps.build_image.outputs.IMAGE_TAG }}
      ECR_URL:   ${{ steps.build_image.outputs.ECR_URL }}

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ARN_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build & push Docker image
        id: build_image
        run: ./cicd/scripts/build-backend.sh

  # --------------------------- BUILD FRONTEND ---------------------------
  build-frontend:
    runs-on: ubuntu-latest
    environment: DEV

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Build Frontend
        working-directory: frontend
        run: |
          echo "VITE_API_URL=https://$DOMAIN_API_NAME" > .env
          npm ci
          npm run build
      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: frontend/dist

  # --------------------------- DEPLOY BACKEND ----------------------
  deploy-backend:
    runs-on: ubuntu-latest
    needs: build-backend
    environment: DEV

    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ARN_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.10.5"
      - name: Install Terragrunt
        uses: autero1/action-terragrunt@v3
        with:
          terragrunt-version: 0.80.4

      - name: Deploy Backend
        run: ./cicd/scripts/deploy-backend.sh
        env:
          IMAGE_TAG: ${{ needs.build-backend.outputs.IMAGE_TAG }}
          ECR_URL:   ${{ needs.build-backend.outputs.ECR_URL }}

  # --------------------------- DEPLOY FRONTEND ----------------------
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: build-frontend
    environment: DEV

    steps:
      - uses: actions/checkout@v4
      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: frontend/dist

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ARN_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.10.5"
      - name: Install Terragrunt
        uses: autero1/action-terragrunt@v3
        with:
          terragrunt-version: 0.80.4

      - name: Deploy Frontend
        run: ./cicd/scripts/deploy-frontend.sh
