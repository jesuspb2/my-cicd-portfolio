name: CICD - Deploy to DEV

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to use"
        required: true
        type: choice
        options:
          - DEV

permissions:
  id-token: write
  contents: read

env:
  ENV:                    ${{ vars.ENV }}
  APP_NAME:               ${{ vars.APP_NAME }}
  AWS_REGION:             ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID:         ${{ vars.AWS_ACCOUNT_ID }}
  BACKEND_BUCKET:         ${{ vars.BACKEND_BUCKET }}
  BACKEND_DYNAMODB_TABLE: ${{ vars.BACKEND_DYNAMODB_TABLE }}
  BUCKET_FRONT:           ${{ vars.BUCKET_FRONT }}
  DOMAIN_NAME:            ${{ vars.DOMAIN_NAME }}
  DOMAIN_API_NAME:        ${{ vars.DOMAIN_API_NAME }}
  FROM_EMAIL:             ${{ vars.FROM_EMAIL }}
  TO_EMAIL:               ${{ vars.TO_EMAIL }}
  DYNAMODB_TABLE_NAME:    ${{ vars.DYNAMODB_TABLE_NAME }}

jobs:
  # --------------------------- UNIT TESTS ---------------------------
  unit-tests:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - uses: actions/checkout@v4
      - run: |
          echo "[INFO] Installing Python dependencies..."
          pip install -r backend/tests/requirements.txt
      - run: |
          echo "[INFO] Running unit tests..."
          pytest backend/tests/test_handler.py -s -v

  # --------------------------- BUILD BACKEND ---------------------------
  build-backend:
    runs-on: ubuntu-latest
    needs: unit-tests
    environment: ${{ inputs.environment }}

    outputs:
      IMAGE_TAG: ${{ steps.build_image.outputs.IMAGE_TAG }}
      ECR_URL:   ${{ steps.build_image.outputs.ECR_URL }}

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ARN_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build & push Docker image
        id: build_image
        run: ./cicd/scripts/build-backend.sh

  # --------------------------- BUILD FRONTEND ---------------------------
  build-frontend:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Build Frontend
        working-directory: frontend
        run: |
          echo "VITE_API_URL=https://$DOMAIN_API_NAME" > .env
          npm ci
          npm run build
      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: frontend/dist

  # --------------------------- DEPLOY BACKEND ----------------------
  deploy-backend:
    runs-on: ubuntu-latest
    needs: build-backend
    environment: ${{ inputs.environment }}

    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ARN_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.10.5"
      - name: Install Terragrunt
        uses: autero1/action-terragrunt@v3
        with:
          terragrunt-version: 0.80.4

      - name: Deploy Backend
        run: ./cicd/scripts/deploy-backend.sh
        env:
          IMAGE_TAG: ${{ needs.build-backend.outputs.IMAGE_TAG }}
          ECR_URL:   ${{ needs.build-backend.outputs.ECR_URL }}

  # --------------------------- DEPLOY FRONTEND ----------------------
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: build-frontend
    environment: ${{ inputs.environment }}

    steps:
      - uses: actions/checkout@v4
      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: frontend/dist

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ARN_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.10.5"
      - name: Install Terragrunt
        uses: autero1/action-terragrunt@v3
        with:
          terragrunt-version: 0.80.4

      - name: Deploy Frontend
        run: ./cicd/scripts/deploy-frontend.sh
  
  # --------------------------- E2E TESTS ---------------------------
  e2e-tests:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright/python:v1.53.0-noble
    needs: [deploy-frontend, deploy-backend]
    environment: ${{ inputs.environment }}

    env:
      HOME: /root
      E2E_TIMEOUT: 10000

    steps:
    - uses: actions/checkout@v4
    - name: Install Python deps
      run: pip install -r e2e_tests/requirements.txt
    - name: Run E2E Tests
      run: |
        pytest e2e_tests/test_form_submission.py -s -v --alluredir=allure-results --browser chromium --browser firefox --browser webkit --numprocesses 2
      continue-on-error: true
    - name: Upload allure-results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-results
        path: allure-results
  
  # --------------------------- PUBLISH ALLURE REPORT ---------------------------
  publish-allure:
    needs: e2e-tests
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.e2e-tests.result != 'skipped'

    steps:
      - uses: actions/checkout@v4

      - name: Download allure-results
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: allure-results

      - name: Generate Allure HTML
        run: |
          curl -sL https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.tgz | tar -xz
          ./allure-2.27.0/bin/allure generate allure-results -o allure-report

      - name: Publish report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: allure-report
          publish_branch: gh-pages
          destination_dir: .
          keep_files: true

      - name: Add summary link
        run: |
          URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          echo "Allure Report" >> $GITHUB_STEP_SUMMARY
          echo "[$URL]($URL)" >> $GITHUB_STEP_SUMMARY
